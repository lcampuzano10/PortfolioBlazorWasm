@using PortfolioAndBlog.Models
<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" 
     aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Skill.DescriptionHeading</h4>
                <button type="button" class="btn-close" aria-label="Close" @onclick="@ModalCancel"></button>
            </div>
            <div class="modal-body">
				<ul>
                    @foreach (Description desc in Skill.Descriptions)
                   {
                       <li>@desc.DescriptionText</li>
                   }
                </ul>               
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
                        break;
                }
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
	public Skill Skill { get; set; }

    [Parameter]
    public ModalDialogType DialogType { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }


    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
}