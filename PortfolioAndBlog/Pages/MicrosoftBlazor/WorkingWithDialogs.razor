@page "/testingmodals"


@*<button @onclick="@(() => Modal.Show<FetchData>("Modal Popup Example"))" class="btn btn-primary">View Modal From Blazored </button>
*@
<div>
	<button type="button" class="btn btn-primary btn-sm" @onclick="QuickAddEmployee">Open AnotherDialog Dialog</button>
</div>

<div>
	<button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog()">Delete</button>
</div>

<AnotherModal @ref="AnotherModal" CloseEventCallback="@AnotherModalDialog_OnDialogClose"></AnotherModal>

@if (DeleteDialogOpen)
{
	<ModalDialog Title="Are you sure?"
				 Text="Do you want to delete this entry?"
				 DialogType = "Models.ModalDialogType.Ok"
				 OnClose="@OnDeleteDialogClose">
	</ModalDialog>
}

@code {
	//[CascadingParameter] 
	//public IModalService Modal { get; set; }
	
	
	public AnotherModal? AnotherModal { get; set; } 

	protected void QuickAddEmployee() {  
		AnotherModal?.Show();  
	} 
	
	public async void AnotherModalDialog_OnDialogClose() {  
		//Employees = (await EmployeeDataService.GetAllEmployees()).ToList();  
		StateHasChanged();  
	} 

	public bool DeleteDialogOpen { get; set; }

	private async Task OnDeleteDialogClose(bool accepted)
	{
		DeleteDialogOpen = false;
		StateHasChanged();
	}

	private void OpenDeleteDialog()
	{
		DeleteDialogOpen = true;
		StateHasChanged();
	}
}